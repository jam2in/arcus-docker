apiVersion: v1
kind: ConfigMap
metadata:
  name: arcus-zk-cm-conf
data:
  maxClientCnxns: "100"
  tickTime: "2000"
  initLimit: "10"
  syncLimit: "5"
  minSessionTimeout: "4000"
  maxSessionTimeout: "200000"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: arcus-zk-cm-script
data:
  arcus-zk-conf-init.sh: |
    #!/bin/bash

    set -ex

    ZOOKEEPER_DATA_DIR=/data
    ZOOKEEPER_CONF_FILE=$ZOOKEEPER_CONF_DIR/zoo.cfg
    ZOOKEEPER_DYNAMIC_CONF_FILE=$ZOOKEEPER_CONF_DIR/zoo.cfg.dynamic
    ZOOKEEPER_MYID_FILE=$ZOOKEEPER_DATA_DIR/myid

    HOST_SHORT_NAME=`hostname -s`
    HOST_DOMAIN_NAME=`hostname -d`
    if [[ $HOST_SHORT_NAME =~ (.*)-([0-9])$ ]]; then
      HOST_NAME=${BASH_REMATCH[1]}
      HOST_ORG=${BASH_REMATCH[2]}
    fi

    function create_config() {
        mkdir -p $ZOOKEEPER_DIR/conf
        rm -f $ZOOKEEPER_CONF
        rm -f $ZOOKEEPER_DYNAMIC_CONF

        echo "maxClientCnxns=$ZOOKEEPER_MAX_CLIENT_CNXNS" >> $ZOOKEEPER_CONF_FILE
        echo "tickTime=$ZOOKEEPER_TICK_TIME" >> $ZOOKEEPER_CONF_FILE
        echo "initLimit=$ZOOKEEPER_INIT_LIMIT" >> $ZOOKEEPER_CONF_FILE
        echo "syncLimit=$ZOOKEEPER_SYNC_LIMIT" >> $ZOOKEEPER_CONF_FILE
        echo "minSessionTimeout=$ZOOKEEPER_MIN_SESSION_TIMEOUT" >> $ZOOKEEPER_CONF_FILE
        echo "maxSessionTimeout=$ZOOKEEPER_MAX_SESSION_TIMEOUT" >> $ZOOKEEPER_CONF_FILE
        echo "clientPort= $ZOOKEEPER_CONF_CLIENT_PORT" >> $ZOOKEEPER_CONF_FILE
        echo "dataDir=$ZOOKEEPER_DATA_DIR" >> $ZOOKEEPER_CONF_FILE

        for (( i=0; i < util.Int32ToString(zookeeper.Spec.Replicas); i++ ))
        do
          if [ $i -eq $HOST_ORG ]; then
          # Zookeeper UnknownHostException issue in Kubernetes
          # https://github.com/kubernetes/contrib/issues/2737
          # https://stackoverflow.com/questions/46605686/zookeeper-hostname-resolution-fails
          # https://hub.docker.com/_/zookeeper?tab=description
            SERVER_NAME = "$HOST_NAME-$i.$HOST_NAME_DOMAIN"
            SERVER_STRING= "$SERVER_NAME:$ZOOKEEPER_SERVER_PORT:$ZOOKEEPER_CONF_LEADER_ELECTION_PORT:participant;$SERVER_NAME:"
            echo server.$((i1))=  "$SERVER_NAME:$ZOOKEEPER_CONF_SERVER_PORT:$ZOOKEEPER_CONF_LEADER_ELECTION_PORT:participant;$SERVER_NAME:$ZOOKEEPER_CONF_CLIENT_PORT$  >> $ZOOKEEPER_DYNAMIC_CONF_FILE"
          else
            echo server.$((i1))=  "0.0.0.0:$ZOOKEEPER_CONF_SERVER_PORT:$ZOOKEEPER_CONF_LEADER_ELECTION_PORT:participant;0.0.0.0:$ZOOKEEPER_CONF_CLIENT_PORT$  >> $ZOOKEEPER_DYNAMIC_CONF_FILE"
          fi
        done
        chown $ZOOKEEPER_USER:$ZOOKEEPER_USER $ZOOKEEPER_CONF_FILE
    }

    function create_myid() {
      mkdir -p $ZOOKEEPER_DATA_DIR
      echo $((HOST_ORG1)) > $ZOOKEEPER_MYID_FILE
      chown $ZOOKEEPER_USER:$ZOOKEEPER_USER $ZOOKEEPER_MYID_FILE
    }

    create_config && create_myid

  arcus-zk-ok.sh: |
    #!/bin/bash

    OK=$(echo ruok | nc 127.0.0.1 2181)
    if [ "$OK" == "imok" ]; then
        exit 0
    else
        exit 1
    fi
---
apiVersion: v1
kind: Service
metadata:
  name: arcus-zk-svc
  labels:
    app: arcus-zk-svc
spec:
  ports:
  - port: 2181
    name: client
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: arcus-zk
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: arcus-zk
spec:
  serviceName: arcus-zk-svc
  replicas: 3
  selector:
    matchLabels:
      app: arcus-zk
  template:
    metadata:
      labels:
        app: arcus-zk          
    spec:
      volumes:
        - name: arcus-zk-vol-script
          configMap:
            name: arcus-zk-cm-script
            defaultMode: 0775
      containers:
      - name: arcus-zk
        imagePullPolicy: Always
        image: jam2in/arcus-zookeeper:3.5.8
        command: ["/bin/sh"]
        args: ["-c", "/scripts/arcus-zk-conf-init.sh && $ZOOKEEPER_DIR/bin/zkServer.sh start-foreground"]
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        volumeMounts:
          - mountPath: /scripts
            name: arcus-zk-vol-script
        readinessProbe:
          exec:
            command: ["/scripts/arcus-zk-ok.sh"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: ["/scripts/arcus-zk-ok.sh"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
        env:
        - name: ZOOKEEPER_CONF_SERVERS
          value: "3"
        - name: ZOOKEEPER_CONF_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_CONF_SERVER_PORT
          value: "2888"
        - name: ZOOKEEPER_CONF_LEADER_ELECTION_PORT
          value: "3888"
        - name: ZOOKEEPER_CONF_MAX_CLIENT_CNXNS
          valueFrom:
            configMapKeyRef:
              name: arcus-zk-cm-conf
              key: maxClientCnxns
        - name: ZOOKEEPER_CONF_TICK_TIME
          valueFrom:
            configMapKeyRef:
              name: arcus-zk-cm-conf
              key: tickTime
        - name: ZOOKEEPER_CONF_INIT_LIMIT
          valueFrom:
            configMapKeyRef:
              name: arcus-zk-cm-conf
              key: initLimit
        - name: ZOOKEEPER_CONF_SYNC_LIMIT
          valueFrom:
            configMapKeyRef:
              name: arcus-zk-cm-conf
              key: syncLimit
        - name: ZOOKEEPER_CONF_MIN_SESSION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: arcus-zk-cm-conf
              key: minSessionTimeout
        - name: ZOOKEEPER_CONF_MAX_SESSION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: arcus-zk-cm-conf
              key: maxSessionTimeout
